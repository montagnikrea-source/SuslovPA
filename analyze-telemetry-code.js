#!/usr/bin/env node

/**
 * –ü–†–û–í–ï–†–ö–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò - –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ JAVASCRIPT
 * –ü–∞—Ä—Å–∏–º HTML –∏ —ç–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
 */

const fs = require('fs');
const path = require('path');

const htmlFile = '/workspaces/SuslovPA/noninput.html';
const html = fs.readFileSync(htmlFile, 'utf8');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                     üî¨ –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–´ JAVASCRIPT –¢–ï–õ–ï–ú–ï–¢–†–ò–ò                                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

// ============= –ü–†–û–í–ï–†–ö–ê 1: HTML —ç–ª–µ–º–µ–Ω—Ç—ã =============
console.log(`1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê HTML –≠–õ–ï–ú–ï–ù–¢–û–í:\n`);

const elements = {
  'freqValue': '–ó–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
  'freqBar': 'Progress bar —á–∞—Å—Ç–æ—Ç—ã',
  'qualityValue': '–ó–Ω–∞—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
  'qualityBar': 'Progress bar –∫–∞—á–µ—Å—Ç–≤–∞',
  'freezeStatusValue': '–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è',
  'precisionValue': '–¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
  'info': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞',
  'lrSlider': '–°–ª–∞–π–¥–µ—Ä Learning Rate',
  'l2Slider': '–°–ª–∞–π–¥–µ—Ä L2',
  'mixSlider': '–°–ª–∞–π–¥–µ—Ä Mix',
};

let elementCount = 0;
Object.entries(elements).forEach(([id, desc]) => {
  const hasElement = html.includes(`id="${id}"`);
  if (hasElement) {
    elementCount++;
    console.log(`   ‚úÖ ${id.padEnd(20)} - ${desc}`);
  } else {
    console.log(`   ‚ùå ${id.padEnd(20)} - ${desc}`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${elementCount}/${Object.keys(elements).length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤\n`);

// ============= –ü–†–û–í–ï–†–ö–ê 2: –§—É–Ω–∫—Ü–∏–∏ =============
console.log(`2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ô:\n`);

const functions = {
  'function render(out)': '–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏',
  'function loop()': '–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª',
  'const setT =': '–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞',
  'const setW =': '–§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã',
  'const $ =': '–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞',
};

let funcCount = 0;
Object.entries(functions).forEach(([pattern, desc]) => {
  const hasFunc = html.includes(pattern);
  if (hasFunc) {
    funcCount++;
    console.log(`   ‚úÖ ${desc}`);
  } else {
    console.log(`   ‚ùå ${desc}`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${funcCount}/${Object.keys(functions).length} —Ñ—É–Ω–∫—Ü–∏–π\n`);

// ============= –ü–†–û–í–ï–†–ö–ê 3: –í—ã–∑–æ–≤—ã render() =============
console.log(`3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–´–ó–û–í–û–í render():\n`);

const renderCallRegex = /render\s*\(\s*([^)]*)\)/g;
const renderCalls = [...html.matchAll(renderCallRegex)];

console.log(`   –ù–∞–π–¥–µ–Ω–æ ${renderCalls.length} –≤—ã–∑–æ–≤–æ–≤ render():\n`);

renderCalls.forEach((match, i) => {
  const callText = match[1].substring(0, 60).replace(/\n/g, ' ');
  console.log(`   ${i + 1}. render(${callText}${callText.length > 60 ? '...' : ''})`);
});

// ============= –ü–†–û–í–ï–†–ö–ê 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ =============
console.log(`\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –≠–õ–ï–ú–ï–ù–¢–û–í –í render():\n`);

// –ù–∞–π–¥–µ–º start –∏ end render —Ñ—É–Ω–∫—Ü–∏–∏
const renderStart = html.indexOf('function render(out)');
const nextFunc = Math.min(
  html.indexOf('function emulateLoad', renderStart),
  html.indexOf('function loop', renderStart),
);
const renderBody = html.substring(renderStart, nextFunc);

const updates = {
  'setT("freqValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
  'setW("freqBar"': 'Progress bar —á–∞—Å—Ç–æ—Ç—ã',
  'setT("qualityValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
  'setW("qualityBar"': 'Progress bar –∫–∞—á–µ—Å—Ç–≤–∞',
  'setT("freezeStatusValue"': '–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è',
  'setT("HValue"': 'H –Ω–µ–π—Ä–æ–Ω—ã',
  'setT("precisionValue"': '–¢–æ—á–Ω–æ—Å—Ç—å',
  'setT("info"': '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
  'setW("lrBar"': 'Progress bar LR',
  'setW("l2Bar"': 'Progress bar L2',
  'setW("mixBar"': 'Progress bar Mix',
};

let updateCount = 0;
Object.entries(updates).forEach(([pattern, desc]) => {
  // –ò—â–µ–º —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ —Å—Ç—Ä–æ–∫
  const escaped = pattern.replace(/[()[\]{}.*+?^$|\\]/g, '\\$&');
  const regex = new RegExp(escaped.replace(/"/g, '[\\s\\n]*"'));
  if (regex.test(renderBody)) {
    updateCount++;
    console.log(`   ‚úÖ ${desc}`);
  } else {
    console.log(`   ‚ö†Ô∏è ${desc} (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏)`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${updateCount}+ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ\n`);

// ============= –ü–†–û–í–ï–†–ö–ê 5: –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª =============
console.log(`5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–°–ù–û–í–ù–û–ì–û –¶–ò–ö–õ–ê:\n`);

const loopChecks = [
  { pattern: 'scan.processOnce()', desc: '–í—ã–∑–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–∞' },
  { pattern: 'render(', desc: '–í—ã–∑–æ–≤ render()' },
  { pattern: 'setTimeout(loop', desc: '–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π setTimeout' },
  { pattern: 'loop()', desc: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è loop()' },
];

let loopOk = 0;
loopChecks.forEach(({ pattern, desc }) => {
  if (html.includes(pattern)) {
    loopOk++;
    console.log(`   ‚úÖ ${desc}`);
  } else {
    console.log(`   ‚ùå ${desc}`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${loopOk}/${loopChecks.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n`);

// ============= –ü–†–û–í–ï–†–ö–ê 6: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è =============
console.log(`6Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò:\n`);

const initChecks = [
  { pattern: 'window.__legacyEngine.start()', desc: '–ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞' },
  { pattern: 'const scan = new FrequencyScanner', desc: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è scan' },
  { pattern: 'const blender = new OutputBlender', desc: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è blender' },
  { pattern: 'const lrSlider =', desc: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤' },
];

let initOk = 0;
initChecks.forEach(({ pattern, desc }) => {
  if (html.includes(pattern)) {
    initOk++;
    console.log(`   ‚úÖ ${desc}`);
  } else {
    console.log(`   ‚ùå ${desc} - –ö–†–ò–¢–ò–ß–ù–û!`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${initOk}/${initChecks.length}\n`);

// ============= –ü–†–û–í–ï–†–ö–ê 7: Debuggging code =============
console.log(`7Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê DEBUG –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø:\n`);

if (html.includes('window.__telemetryDebug')) {
  console.log(`   ‚úÖ Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ render()`);
  console.log(`      –õ–æ–≥–∏ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –∫–∞–∫:`);
  console.log(`      [RENDER 1] out= {...} scan= object setT= function`);
} else {
  console.log(`   ‚ùå Debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç`);
}

// ============= –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ =============
console.log(`\n${'‚ïê'.repeat(100)}`);
console.log(`üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:\n`);

const totalChecks = elementCount + funcCount + loopOk + initOk;
const totalPossible = Object.keys(elements).length + Object.keys(functions).length + loopChecks.length + initChecks.length;
const percent = Math.round((totalChecks / totalPossible) * 100);

console.log(`   –≠–ª–µ–º–µ–Ω—Ç—ã HTML:      ${elementCount}/${Object.keys(elements).length}`);
console.log(`   –§—É–Ω–∫—Ü–∏–∏:           ${funcCount}/${Object.keys(functions).length}`);
console.log(`   –¶–∏–∫–ª:              ${loopOk}/${loopChecks.length}`);
console.log(`   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:     ${initOk}/${initChecks.length}`);
console.log(`   ${'‚îÄ'.repeat(50)}`);
console.log(`   –ò–¢–û–ì–û:             ${totalChecks}/${totalPossible} (${percent}%)\n`);

if (percent >= 90) {
  console.log(`‚úÖ –ö–û–î –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï`);
  console.log(`   –û—Ç–∫—Ä–æ–π —Å–∞–π—Ç –∏ –ø–æ—Å–º–æ—Ç—Ä–∏ –∫–æ–Ω—Å–æ–ª—å (F12)`);
  console.log(`   –î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –ª–æ–≥–∏ [RENDER N]`);
  console.log(`   –ï—Å–ª–∏ –Ω–µ—Ç –ª–æ–≥–æ–≤ - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å:`);
  console.log(`   ‚Ä¢ –§–∞–∑–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–∞—è`);
  console.log(`   ‚Ä¢ HTML —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø–æ–∑–∂–µ –∫–æ–¥–∞`);
  console.log(`   ‚Ä¢ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω`);
} else if (percent >= 70) {
  console.log(`‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–ë–ï–õ–´`);
  console.log(`   –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
} else {
  console.log(`‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´`);
  console.log(`   –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
}

console.log(`\n${'‚ïê'.repeat(100)}\n`);
