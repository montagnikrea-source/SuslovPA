#!/usr/bin/env node

/**
 * –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ü–û–ß–ö–ò: –ê–õ–ì–û–†–ò–¢–ú ‚Üí LOOP ‚Üí RENDER ‚Üí UI
 * –ò—â–µ–º –≥–¥–µ –∏–º–µ–Ω–Ω–æ –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è —Å–≤—è–∑—å
 */

const fs = require('fs');
const path = require('path');

const htmlFile = '/workspaces/SuslovPA/noninput.html';
const html = fs.readFileSync(htmlFile, 'utf8');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë              üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¶–ï–ü–û–ß–ö–ò: –ê–õ–ì–û–†–ò–¢–ú ‚Üí UI                                    ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üîó –¶–ï–ü–û–ß–ö–ê –ü–ï–†–ï–î–ê–ß–ò –î–ê–ù–ù–´–•:

  1. window.__legacyEngine.start()
       ‚Üì
  2. const scan = new FrequencyScanner()
       ‚Üì
  3. loop() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
       ‚Üì
  4. scan.processOnce() - –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
       ‚Üì
  5. render(out) –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –¥–∞–Ω–Ω—ã–º–∏
       ‚Üì
  6. setT/setW –æ–±–Ω–æ–≤–ª—è—é—Ç DOM —ç–ª–µ–º–µ–Ω—Ç—ã
       ‚Üì
  7. –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n`);

// ========== –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê ==========
console.log(`1Ô∏è‚É£ –≠–¢–ê–ü 1: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–õ–ì–û–†–ò–¢–ú–ê (window.__legacyEngine.start())\n`);

// –ù–∞–π–¥–µ–º –≥–¥–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è window.__legacyEngine
const legacyEngineIndex = html.indexOf('window.__legacyEngine');
if (legacyEngineIndex > 0) {
  const context = html.substring(legacyEngineIndex - 200, legacyEngineIndex + 500);
  console.log(`   ‚úÖ window.__legacyEngine –Ω–∞–π–¥–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç start()
  if (html.includes('window.__legacyEngine.start()')) {
    console.log(`   ‚úÖ window.__legacyEngine.start() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è\n`);
  } else {
    console.log(`   ‚ùå window.__legacyEngine.start() –ù–ï –í–´–ó–´–í–ê–ï–¢–°–Ø!\n`);
  }
} else {
  console.log(`   ‚ùå window.__legacyEngine –ù–ï –ù–ê–ô–î–ï–ù–ê!\n`);
}

// ========== –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SCAN ==========
console.log(`2Ô∏è‚É£ –≠–¢–ê–ü 2: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø SCAN (const scan = new FrequencyScanner)\n`);

if (html.includes('const scan = new FrequencyScanner')) {
  console.log(`   ‚úÖ scan –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–µ —Å loop
  const scanIndex = html.indexOf('const scan = new FrequencyScanner');
  const nextLoop = html.indexOf('function loop()', scanIndex);
  const nextWindow = html.indexOf('window.__legacyEngine', scanIndex);
  
  if (nextLoop > scanIndex && nextLoop < scanIndex + 5000) {
    console.log(`   ‚úÖ loop() –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ—Å–ª–µ scan - –•–û–†–û–®–û`);
  }
  
  if (nextWindow > scanIndex && nextWindow < scanIndex + 3000) {
    console.log(`   ‚úÖ window.__legacyEngine.start() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ scan - –•–û–†–û–®–û\n`);
  }
} else {
  console.log(`   ‚ùå scan –ù–ï –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!\n`);
}

// ========== –≠–¢–ê–ü 3: LOOP –§–£–ù–ö–¶–ò–Ø ==========
console.log(`3Ô∏è‚É£ –≠–¢–ê–ü 3: LOOP –§–£–ù–ö–¶–ò–Ø\n`);

const loopStart = html.indexOf('function loop()');
if (loopStart > 0) {
  const loopEnd = html.indexOf('catch (e)', loopStart) + 200;
  const loopBody = html.substring(loopStart, loopEnd);
  
  console.log(`   ‚úÖ function loop() –Ω–∞–π–¥–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º –∫–ª—é—á–µ–≤—ã–µ –≤—ã–∑–æ–≤—ã
  const checks = [
    { pattern: /scan\.processOnce\(\)/, name: 'scan.processOnce()' },
    { pattern: /render\s*\(/, name: 'render() –≤—ã–∑–æ–≤' },
    { pattern: /setTimeout\s*\(\s*loop/, name: 'setTimeout(loop)' },
    { pattern: /try\s*{/, name: 'try –±–ª–æ–∫' },
  ];
  
  checks.forEach(({ pattern, name }) => {
    if (pattern.test(loopBody)) {
      console.log(`      ‚úÖ ${name}`);
    } else {
      console.log(`      ‚ùå ${name} - –ù–ï–¢!`);
    }
  });
  console.log();
} else {
  console.log(`   ‚ùå function loop() –ù–ï –ù–ê–ô–î–ï–ù–ê!\n`);
}

// ========== –≠–¢–ê–ü 4: RENDER –§–£–ù–ö–¶–ò–Ø ==========
console.log(`4Ô∏è‚É£ –≠–¢–ê–ü 4: RENDER –§–£–ù–ö–¶–ò–Ø\n`);

const renderStart = html.indexOf('function render(out)');
if (renderStart > 0) {
  const renderEnd = html.indexOf('function emulateLoad', renderStart);
  const renderBody = html.substring(renderStart, renderEnd);
  
  console.log(`   ‚úÖ function render(out) –Ω–∞–π–¥–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω–∞ –ø–æ–ª—É—á–∞–µ—Ç
  if (/render\s*\(\s*out\s*\)/.test(html)) {
    console.log(`      ‚úÖ –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä out`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
  const uses = [
    { pattern: /out\.f/, name: 'out.f (—á–∞—Å—Ç–æ—Ç–∞)' },
    { pattern: /out\.conf/, name: 'out.conf (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)' },
    { pattern: /out\.inertia/, name: 'out.inertia (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)' },
    { pattern: /scan\.tuner/, name: 'scan.tuner (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã)' },
  ];
  
  let usesCount = 0;
  uses.forEach(({ pattern, name }) => {
    if (pattern.test(renderBody)) {
      usesCount++;
      console.log(`      ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç ${name}`);
    } else {
      console.log(`      ‚ùå –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ${name}`);
    }
  });
  
  console.log();
} else {
  console.log(`   ‚ùå function render(out) –ù–ï –ù–ê–ô–î–ï–ù–ê!\n`);
}

// ========== –≠–¢–ê–ü 5: setT –ò setW –§–£–ù–ö–¶–ò–ò ==========
console.log(`5Ô∏è‚É£ –≠–¢–ê–ü 5: setT –ò setW –§–£–ù–ö–¶–ò–ò\n`);

const setTMatch = html.match(/const setT\s*=\s*\([^)]*\)\s*=>\s*{[^}]+}/);
const setWMatch = html.match(/const setW\s*=\s*\([^)]*\)\s*=>\s*{[^}]+}/);

if (setTMatch) {
  console.log(`   ‚úÖ setT —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞`);
  
  // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç
  if (setTMatch[0].includes('textContent')) {
    console.log(`      ‚úÖ –û–±–Ω–æ–≤–ª—è–µ—Ç textContent —ç–ª–µ–º–µ–Ω—Ç–∞`);
  }
  if (setTMatch[0].includes('$')) {
    console.log(`      ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç $() –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞\n`);
  }
} else {
  console.log(`   ‚ùå setT —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ù–ê–ô–î–ï–ù–ê!\n`);
}

if (setWMatch) {
  console.log(`   ‚úÖ setW —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞`);
  
  if (setWMatch[0].includes('width')) {
    console.log(`      ‚úÖ –û–±–Ω–æ–≤–ª—è–µ—Ç width –¥–ª—è progress bars`);
  }
  if (setWMatch[0].includes('$')) {
    console.log(`      ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç $() –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞\n`);
  }
} else {
  console.log(`   ‚ùå setW —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –ù–ê–ô–î–ï–ù–ê!\n`);
}

// ========== –≠–¢–ê–ü 6: –û–ë–ù–û–í–õ–ï–ù–ò–Ø –í RENDER ==========
console.log(`6Ô∏è‚É£ –≠–¢–ê–ü 6: –í–´–ó–û–í–´ setT/setW –í RENDER\n`);

const renderStart2 = html.indexOf('function render(out)');
const renderEnd2 = html.indexOf('function emulateLoad', renderStart2);
const renderBody2 = html.substring(renderStart2, renderEnd2);

const updates = [
  { pattern: /setT\s*\(\s*["']freqValue["']/, name: 'freqValue' },
  { pattern: /setW\s*\(\s*["']freqBar["']/, name: 'freqBar' },
  { pattern: /setT\s*\(\s*["']statusText["']/, name: 'statusText' },
  { pattern: /setT\s*\(\s*["']info["']/, name: 'info' },
  { pattern: /setT\s*\(\s*["']qualityValue["']/, name: 'qualityValue' },
  { pattern: /setW\s*\(\s*["']qualityBar["']/, name: 'qualityBar' },
];

let updateCount = 0;
updates.forEach(({ pattern, name }) => {
  // –ò—â–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–æ
  if (renderBody2.includes(name)) {
    updateCount++;
    console.log(`   ‚úÖ ${name} –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
  } else {
    console.log(`   ‚ùå ${name} –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${updateCount}/${updates.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è\n`);

// ========== –≠–¢–ê–ü 7: HTML –≠–õ–ï–ú–ï–ù–¢–´ ==========
console.log(`7Ô∏è‚É£ –≠–¢–ê–ü 7: HTML –≠–õ–ï–ú–ï–ù–¢–´\n`);

const elementIds = [
  'freqValue', 'freqBar', 'statusText', 'info', 
  'qualityValue', 'qualityBar', 'loadingBar'
];

let elementsFound = 0;
elementIds.forEach(id => {
  if (html.includes(`id="${id}"`)) {
    elementsFound++;
    console.log(`   ‚úÖ <div id="${id}"> —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`   ‚ùå <div id="${id}"> –ù–ï –ù–ê–ô–î–ï–ù!`);
  }
});

console.log(`\n   –†–µ–∑—É–ª—å—Ç–∞—Ç: ${elementsFound}/${elementIds.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ HTML\n`);

// ========== –§–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó ==========
console.log(`${'‚ïê'.repeat(100)}`);
console.log(`üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–´:\n`);

if (updateCount < 4) {
  console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê 1: setT/setW –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –º–∞–ª–æ
   ‚Üí –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ render()\n`);
}

if (elementsFound < 5) {
  console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê 2: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   ‚Üí –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã\n`);
}

if (renderBody2.includes('return') && renderBody2.indexOf('return') < renderBody2.length / 2) {
  console.log(`‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: render() –º–æ–∂–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å —Ä–∞–Ω–æ
   ‚Üí –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—Å–ª–æ–≤–∏—è –∏ return —Ä–∞–Ω–Ω–∏–µ\n`);
}

console.log(`üîß –û–°–ù–û–í–ù–´–ï –¢–û–ß–ö–ò –ü–†–û–í–ï–†–ö–ò:\n`);
console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ https://suslovpa.vercel.app`);
console.log(`   2. –ù–∞–∂–º–∏—Ç–µ F12 ‚Üí Console`);
console.log(`   3. –í–≤–µ–¥–∏—Ç–µ: window.__legacyEngine`);
console.log(`      –ï—Å–ª–∏ undefined - –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–µ –∑–∞–ø—É—â–µ–Ω!`);
console.log(`   4. –í–≤–µ–¥–∏—Ç–µ: window.__telemetryDebug`);
console.log(`      –ï—Å–ª–∏ > 0 - render() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!`);
console.log(`   5. –í–≤–µ–¥–∏—Ç–µ: document.getElementById('freqValue').textContent`);
console.log(`      –ï—Å–ª–∏ –ø—É—Å—Ç–æ - setT() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!\n`);

console.log(`${'‚ïê'.repeat(100)}\n`);
