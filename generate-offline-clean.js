#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏...\n');

// –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
let content = fs.readFileSync('/workspaces/SuslovPA/noninput.html', 'utf8');

// ===== –£–î–ê–õ–Ø–ï–ú –í–°–ï –í–ù–ï–®–ù–ò–ï –°–ö–†–ò–ü–¢–´ –ò –°–°–´–õ–ö–ò =====

// 1. –£–¥–∞–ª—è–µ–º –í–°–ï script —Ç–µ–≥–∏ —Å src –∞—Ç—Ä–∏–±—É—Ç–æ–º (–∫—Ä–æ–º–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤)
content = content.replace(/<script[^>]+src=["'][^"']*["'][^>]*>[\s\S]*?<\/script>/gi, '');
content = content.replace(/<script[^>]+src=["'][^"']*["'][^>]*><\/script>/gi, '');

// 2. –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏ link –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ (–∫—Ä–æ–º–µ —Å—Ç–∏–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –≤—Å—Ç—Ä–æ–µ–Ω—ã)
content = content.replace(/<link[^>]+href=["']https?:\/\/[^"']*["'][^>]*>/gi, '');
content = content.replace(/<link[^>]*rel=["']stylesheet["'][^>]*>/gi, '');

// 3. –£–¥–∞–ª—è–µ–º meta —Ç–µ–≥–∏ –¥–ª—è Google
content = content.replace(/<meta[^>]*google[^>]*>/gi, '');

// 4. –£–¥–∞–ª—è–µ–º noscript —Ç–µ–≥–∏
content = content.replace(/<noscript>[\s\S]*?<\/noscript>/gi, '');

// ===== –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Æ –û–§–§–õ–ê–ô–ù –†–ï–ñ–ò–ú–ê =====

// –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü </head>
const headEndIndex = content.indexOf('</head>');
if (headEndIndex !== -1) {
  const offlineInitScript = `
    <script>
      // ===== –û–§–§–õ–ê–ô–ù –†–ï–ñ–ò–ú –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
      window.OFFLINE_MODE = true;
      window.IS_OFFLINE = true;
      console.log('%c‚úÖ OFFLINE MODE ACTIVE', 'color: #ff9800; font-size: 14px; font-weight: bold;');
      
      // Mock Firebase –ø–æ–ª–Ω–æ—Å—Ç—å—é
      window.firebase = window.firebase || {
        initializeApp: () => window.firebase,
        database: () => ({
          ref: () => ({
            on: () => {},
            once: () => Promise.resolve({ val: () => null }),
            set: () => Promise.resolve(),
            push: () => ({ set: () => Promise.resolve() }),
            remove: () => Promise.resolve(),
            update: () => Promise.resolve()
          }),
          goOffline: () => {},
          goOnline: () => {}
        }),
        auth: () => ({
          onAuthStateChanged: (cb) => cb(null),
          signOut: () => Promise.resolve(),
          signInAnonymously: () => Promise.resolve()
        }),
        storage: () => ({
          ref: () => ({
            put: () => Promise.resolve(),
            getDownloadURL: () => Promise.resolve('offline')
          })
        })
      };
      
      // Mock Telegram
      window.TelegramWebApp = {
        ready: () => {},
        sendData: () => {},
        close: () => {},
        initData: '',
        user: null,
        onEvent: () => {},
        offEvent: () => {},
        showAlert: (msg) => alert(msg),
        showConfirm: (msg, cb) => cb(confirm(msg))
      };
      
      window.tg = window.TelegramWebApp;
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch
      const originalFetch = window.fetch;
      window.fetch = function(url, options) {
        if (typeof url === 'string' && url.startsWith('http')) {
          console.log('%cüìµ Offline: blocking external fetch', 'color: #666; font-size: 10px;', url);
          return Promise.resolve(new Response(JSON.stringify({offline: true}), {
            status: 200,
            headers: {'content-type': 'application/json'}
          }));
        }
        try {
          return originalFetch(url, options);
        } catch (e) {
          return Promise.resolve(new Response(JSON.stringify({offline: true}), {
            status: 200,
            headers: {'content-type': 'application/json'}
          }));
        }
      };
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç XHR
      const XHR = window.XMLHttpRequest;
      window.XMLHttpRequest = function() {
        const xhr = new XHR();
        const open = xhr.open;
        xhr.open = function(method, url) {
          if (url && url.startsWith('http')) {
            console.log('%cüìµ Offline: blocking external XHR', 'color: #666; font-size: 10px;', url);
            xhr._offline = true;
          }
          return open.apply(this, arguments);
        };
        const send = xhr.send;
        xhr.send = function(data) {
          if (xhr._offline) {
            xhr.status = 200;
            xhr.responseText = JSON.stringify({offline: true});
            setTimeout(() => {
              xhr.onload && xhr.onload();
              xhr.onreadystatechange && xhr.onreadystatechange();
            }, 10);
            return;
          }
          return send.apply(this, arguments);
        };
        return xhr;
      };
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ localStorage –≤–º–µ—Å—Ç–æ Firebase
      window.saveToLocalStorage = (key, value) => {
        try {
          localStorage.setItem(key, JSON.stringify(value));
        } catch (e) {
          console.warn('Cannot save to localStorage:', e);
        }
      };
      
      window.loadFromLocalStorage = (key) => {
        try {
          const value = localStorage.getItem(key);
          return value ? JSON.parse(value) : null;
        } catch (e) {
          return null;
        }
      };
      
      console.log('%c‚úÖ Offline initialization complete', 'color: #18b56c; font-weight: bold;');
    </script>
  `;
  
  content = content.substring(0, headEndIndex) + offlineInitScript + content.substring(headEndIndex);
}

// ===== –î–û–ë–ê–í–õ–Ø–ï–ú ORANGE BANNER –í BODY =====

// –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ <body>
const bodyMatch = content.match(/<body[^>]*>/i);
if (bodyMatch) {
  const bodyIndex = content.indexOf(bodyMatch[0]) + bodyMatch[0].length;
  
  const banner = `
    <div id="offline-banner" style="
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: linear-gradient(90deg, #ff9800 0%, #ffa726 100%);
      color: white;
      padding: 12px 20px;
      text-align: center;
      font-weight: bold;
      z-index: 999999;
      box-shadow: 0 4px 12px rgba(255, 152, 0, 0.5);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', sans-serif;
      font-size: 14px;
      letter-spacing: 0.3px;
    ">
      üü† OFFLINE MODE - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ | –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ
    </div>
    <style>
      html, body { margin: 0 !important; padding: 0 !important; }
      body > * { margin-top: 50px; }
    </style>
  `;
  
  content = content.substring(0, bodyIndex) + banner + content.substring(bodyIndex);
}

// ===== –í–ê–õ–ò–î–ê–¶–ò–Ø =====

const checks = {
  'NeuroHomeostasis': content.includes('NeuroHomeostasis'),
  'Frequency Scanner': content.includes('Frequency Scanner'),
  'OFFLINE_MODE': content.includes('OFFLINE_MODE'),
  'offline-banner': content.includes('offline-banner'),
  'Firebase mock': content.includes('window.firebase'),
  'TelegramWebApp mock': content.includes('TelegramWebApp'),
  'localStorage': content.includes('localStorage')
};

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
Object.entries(checks).forEach(([name, value]) => {
  console.log(`   ${value ? '‚úÖ' : '‚ùå'} ${name}`);
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
if (content.length < 300000) {
  console.warn('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–∞–ª');
}

if (content.length > 1000000) {
  console.warn('\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫');
}

// ===== –°–û–•–†–ê–ù–Ø–ï–ú =====

const outputPath = '/workspaces/SuslovPA/SuslovPA-Offline.html';
fs.writeFileSync(outputPath, content, 'utf8');

const sizeKb = (content.length / 1024).toFixed(2);
console.log(`\n‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);
console.log(`üìä –†–∞–∑–º–µ—Ä: ${sizeKb} KB (${content.length} bytes)`);

// –ö–æ–ø–∏—Ä—É–µ–º –≤ public
const publicPath = '/workspaces/SuslovPA/public/SuslovPA-Offline.html';
fs.copyFileSync(outputPath, publicPath);
console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é`);

console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∫–∞–∫ "file://..." –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
