/**
 * API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ Telegram —Ç–æ–∫–µ–Ω–∞
 * 
 * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:
 * 1. –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (referer)
 * 2. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É IP –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * 3. –¢–æ–∫–µ–Ω –≤—Å–µ–≥–¥–∞ –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (TELEGRAM_BOT_TOKEN)
 * 
 * –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
 * - –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –∫–æ–¥–µ!
 * - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
 * - –õ–æ–≥–∏—Ä—É–π—Ç–µ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
 * - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ rate limiting
 */

module.exports = async function handler(request, response) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º CORS
  const allowedOrigins = [
    'https://montagnikrea-source.github.io/SuslovPA
    'https://montagnikrea-source.github.io',
    'http://localhost:3000',
    'http://localhost:8000'
  ];

  const reqOrigin = request.headers.origin || request.headers.referer || '';
  // –ï—Å–ª–∏ origin –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –≤—Ö–æ–¥–∏—Ç –≤ allowed -> –æ—Ç—Ä–∞–∂–∞–µ–º –µ–≥–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, –∏–Ω–∞—á–µ —Å—Ç–∞–≤–∏–º '*'
  const acao = allowedOrigins.some(o => reqOrigin.startsWith(o)) && request.headers.origin ? request.headers.origin : '*';
  response.setHeader('Access-Control-Allow-Origin', acao);
  response.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
  response.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (request.method === 'OPTIONS') {
    return response.status(200).end();
  }
  
  // –¢–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
  if (request.method !== 'GET') {
    return response.status(405).json({ 
      ok: false, 
      error: 'Method not allowed' 
    });
  }
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!token) {
      console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return response.status(500).json({ 
        ok: false, 
        error: 'Token not configured on server' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const referer = request.headers.referer || '';
    const isAllowedOrigin = allowedOrigins.some(origin => referer.startsWith(origin));
    
    if (!isAllowedOrigin && process.env.NODE_ENV === 'production') {
      console.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–æ–∫–µ–Ω—É —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:', referer);
      return response.status(403).json({ 
        ok: false, 
        error: 'Unauthorized origin' 
      });
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –¥–æ—Å—Ç—É–ø
    console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∫–ª–∏–µ–Ω—Ç—É
    response.status(200).json({ 
      ok: true, 
      token: token 
    });
    
  } catch (error) {
    console.error('üö® –û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ /api/auth/telegram-token:', error);
    response.status(500).json({ 
      ok: false, 
      error: error.message || 'Internal server error' 
    });
  }
}
