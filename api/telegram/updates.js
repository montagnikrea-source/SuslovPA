// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏—Å—Ç–æ—Ä–∏–∏
// –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ Telegram
// –í–ê–ñ–ù–û: Telegram Bot API getUpdates() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!
// –ú—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏

let lastUpdateId = 0;
let allMessages = [];
let lastKnownOffset = 0;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –≥—Ä—É–ø–ø–µ
const messageStore = {
  '@noninput': []
};

module.exports = async function handler(req, res) {
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    
    if (!botToken) {
      return res.status(500).json({ 
        success: false, 
        error: 'Server misconfigured: TELEGRAM_BOT_TOKEN is not set' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    const { lastId = -1, limit = 100, timeout = 5, history = false } = req.query;

    // –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å lastKnownOffset
    // –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
    let offset = lastKnownOffset; // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ offset
    let finalLimit = parseInt(limit);
    
    console.log(`ÔøΩ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (offset=${offset}, limit=${finalLimit})`);
    
    const url = `https://api.telegram.org/bot${botToken}/getUpdates?` +
      `offset=${Math.max(0, offset)}&limit=${finalLimit}&allowed_updates=message`;

    const response = await fetch(url, {
      method: 'GET',
      timeout: (timeout + 5) * 1000
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    const data = await response.json();

    if (!data.ok) {
      console.warn('‚ö†Ô∏è Telegram API error:', data.description);
      return res.status(200).json({
        success: false,
        updates: [],
        error: data.description,
        cached: allMessages.length
      });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º lastUpdateId –∏ lastKnownOffset
    if (data.result.length > 0) {
      lastUpdateId = data.result[data.result.length - 1].update_id;
      lastKnownOffset = lastUpdateId + 1; // –°–ª–µ–¥—É—é—â–∏–π offset
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω lastKnownOffset = ${lastKnownOffset}`);
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ @noninput (id: -1002360087823)
    const newMessages = data.result
      .filter(u => u.message && 
              (u.message.chat.username === 'noninput' || 
               u.message.chat.id === -1002360087823 ||
               u.message.chat.type === 'private'))
      .map(u => ({
        id: u.update_id,
        timestamp: u.message.date,
        from: {
          id: u.message.from.id,
          first_name: u.message.from.first_name,
          username: u.message.from.username
        },
        text: u.message.text || u.message.caption || '',
        chat: {
          id: u.message.chat.id,
          type: u.message.chat.type,
          title: u.message.chat.title,
          username: u.message.chat.username
        }
      }));

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é (–¥–µ–¥—É–±–ª–∏—Ä—É–µ–º –ø–æ ID)
    if (newMessages.length > 0) {
      newMessages.forEach(msg => {
        if (!allMessages.find(m => m.id === msg.id)) {
          allMessages.push(msg);
          console.log(`‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ID ${msg.id}: ${msg.text.substring(0, 50)}...`);
        }
      });
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      allMessages.sort((a, b) => a.timestamp - b.timestamp);
      
      // –•—Ä–∞–Ω–∏–º–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ –æ–±—Ä–µ–∑–∞–µ–º!)
      // –ù–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 500 –¥–ª—è –ø–∞–º—è—Ç–∏
      if (allMessages.length > 500) {
        allMessages = allMessages.slice(-500);
        console.log(`‚ö†Ô∏è –û–±—Ä–µ–∑–∞–ª–∏ –¥–æ 500 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π`);
      }
      
      console.log(`üìö –í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏: ${allMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      success: true,
      updates: allMessages, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      lastId: lastUpdateId,
      count: allMessages.length,
      cached: allMessages.length,
      offset: lastKnownOffset
    };
    
    return res.status(200).json(result);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:', error.message);
    return res.status(500).json({
      success: false,
      error: error.message
    });
  }
};