#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ—Ñ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏...\n');

// –ß–∏—Ç–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
const mainFile = fs.readFileSync('/workspaces/SuslovPA/noninput.html', 'utf8');

// –ù–∞—Ö–æ–¥–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–≤—Å—ë –º–µ–∂–¥—É <body> –∏ </body>)
const bodyMatch = mainFile.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
const bodyContent = bodyMatch ? bodyMatch[1] : '';

// –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã CDN –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
let offlineContent = mainFile
  // –£–¥–∞–ª—è–µ–º Google AdSense
  .replace(/<script[^>]*async[^>]*src=["\']https:\/\/pagead2\.googlesyndication\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/pagead2\.googlesyndication\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  // –£–¥–∞–ª—è–µ–º Google Analytics
  .replace(/<script[^>]*src=["\']https:\/\/www\.googletagmanager\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script async src=["\']https:\/\/www\.google-analytics\.com[^"\']*["\']><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/www\.googletagmanager\.com[^"\']*["\'][^>]*>[\s\S]*?<\/script>/gi, '')
  // –£–¥–∞–ª—è–µ–º Firebase
  .replace(/<script[^>]*src=["\']https:\/\/www\.gstatic\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/www\.firebaseapp\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/firebase\.google\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/www\.googleapis\.com[^"\']*["\'][^>]*><\/script>/gi, '')
  // –£–¥–∞–ª—è–µ–º JSZip
  .replace(/<script[^>]*src=["\']https:\/\/cdnjs\.cloudflare\.com\/ajax\/libs\/jszip[^"\']*["\'][^>]*><\/script>/gi, '')
  .replace(/<script[^>]*src=["\']https:\/\/stuk\.github\.io\/jszip[^"\']*["\'][^>]*><\/script>/gi, '')
  // –£–¥–∞–ª—è–µ–º Yandex
  .replace(/<script[^>]*src=["\']https:\/\/mc\.yandex\.ru[^"\']*["\'][^>]*><\/script>/gi, '')
  // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ CDN —Å–∫—Ä–∏–ø—Ç—ã
  .replace(/<script[^>]*src=["\']https:\/\/[^"\']*["\'][^>]*><\/script>/gi, '');

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ head –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –¥–æ body
const headMatch = offlineContent.match(/<\/head>/i);
if (headMatch) {
  const headIndex = offlineContent.indexOf(headMatch[0]);
  
  // –í—Å—Ç–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–¥ </head>
  const offlineInit = `
    <script>
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
      window.OFFLINE_MODE = true;
      console.log('‚úÖ Offline mode initialized');
      
      // Mock Firebase
      window.firebase = {
        initializeApp: function() { return this; },
        database: function() { 
          return {
            ref: function() {
              return {
                on: function() {},
                once: function() { return Promise.resolve({ val: () => null }); },
                set: function() { return Promise.resolve(); },
                push: function() { return { set: () => Promise.resolve() }; }
              };
            }
          };
        },
        auth: function() {
          return {
            onAuthStateChanged: function(callback) { callback(null); }
          };
        }
      };
      
      // Mock Telegram
      window.TelegramWebApp = {
        ready: function() {},
        sendData: function() {},
        close: function() {},
        initData: '',
        user: null
      };
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç fetch –¥–ª—è –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
      const originalFetch = window.fetch;
      window.fetch = function(...args) {
        const url = args[0];
        if (typeof url === 'string' && (url.includes('firebase') || url.includes('telegram') || url.includes('http'))) {
          console.warn('üìµ Offline mode: blocking external request to', url);
          return Promise.resolve(new Response(JSON.stringify({ offline: true }), { status: 200 }));
        }
        return originalFetch.apply(this, args).catch(() => {
          console.warn('üìµ Offline mode: request failed, returning offline response');
          return Promise.resolve(new Response(JSON.stringify({ offline: true }), { status: 200 }));
        });
      };
      
      // –ü–µ—Ä–µ—Ö–≤–∞—Ç XMLHttpRequest
      const originalXHR = window.XMLHttpRequest;
      window.XMLHttpRequest = function() {
        const xhr = new originalXHR();
        const originalOpen = xhr.open;
        xhr.open = function(method, url, ...rest) {
          if (typeof url === 'string' && (url.includes('firebase') || url.includes('telegram') || url.includes('http'))) {
            console.warn('üìµ Offline mode: blocking XHR to', url);
            return;
          }
          return originalOpen.apply(this, [method, url, ...rest]);
        };
        return xhr;
      };
    </script>
  `;
  
  offlineContent = offlineContent.substring(0, headIndex) + offlineInit + offlineContent.substring(headIndex);
}

// –í—Å—Ç–∞–≤–ª—è–µ–º orange offline banner –≤ –Ω–∞—á–∞–ª–æ body
const bodyStartMatch = offlineContent.match(/<body[^>]*>/i);
if (bodyStartMatch) {
  const bodyStartIndex = offlineContent.indexOf(bodyStartMatch[0]) + bodyStartMatch[0].length;
  
  const offlineBanner = `
    <div style="
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: linear-gradient(90deg, #ff9800 0%, #ffa726 100%);
      color: white;
      padding: 10px 20px;
      text-align: center;
      font-weight: bold;
      z-index: 99999;
      box-shadow: 0 2px 8px rgba(255, 152, 0, 0.4);
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    ">
      üü† OFFLINE MODE - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    </div>
    <style>
      body { padding-top: 40px !important; }
    </style>
  `;
  
  offlineContent = offlineContent.substring(0, bodyStartIndex) + offlineBanner + offlineContent.substring(bodyStartIndex);
}

// –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –º–µ—Å—Ç–µ
if (!offlineContent.includes('NeuroHomeostasis') && bodyContent.includes('NeuroHomeostasis')) {
  console.log('‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤—Ä–µ–∂–¥—ë–Ω, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
  offlineContent = mainFile;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
if (offlineContent.length < 100000) {
  console.error('‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª');
  offlineContent = mainFile;
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º
const outputPath = '/workspaces/SuslovPA/SuslovPA-Offline.html';
fs.writeFileSync(outputPath, offlineContent, 'utf8');

const sizeKb = (offlineContent.length / 1024).toFixed(2);
console.log(`‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${outputPath}`);
console.log(`üìä –†–∞–∑–º–µ—Ä: ${sizeKb} KB`);
console.log(`‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç –∞–ª–≥–æ—Ä–∏—Ç–º: ${offlineContent.includes('NeuroHomeostasis') ? '–î–ê ‚úì' : '–ù–ï–¢ ‚úó'}`);
console.log(`‚úÖ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: ${offlineContent.includes('OFFLINE_MODE') ? '–î–ê ‚úì' : '–ù–ï–¢ ‚úó'}`);
console.log(`‚úÖ Firebase mock: ${offlineContent.includes('window.firebase') ? '–î–ê ‚úì' : '–ù–ï–¢ ‚úó'}`);
console.log(`‚úÖ Orange banner: ${offlineContent.includes('ff9800') ? '–î–ê ‚úì' : '–ù–ï–¢ ‚úó'}`);

// –ö–æ–ø–∏—Ä—É–µ–º –≤ public
const publicPath = '/workspaces/SuslovPA/public/SuslovPA-Offline.html';
fs.copyFileSync(outputPath, publicPath);
console.log(`‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ public: ${publicPath}`);

console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –û—Ñ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.');
