#!/usr/bin/env node

/**
 * –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ï–õ–ï–ú–ï–¢–†–ò–ò –ù–ê –í–°–ï–• 4 –§–ê–ô–õ–ê–•
 * Verifies all 4 files are synchronized
 */

const fs = require('fs');
const path = require('path');

const files = [
  '/workspaces/SuslovPA/noninput.html',
  '/workspaces/SuslovPA/noninput-mobile.html',
  '/workspaces/SuslovPA/public/noninput.html',
  '/workspaces/SuslovPA/public/noninput-mobile.html',
];

console.log('\n' + '='.repeat(100));
console.log('üîÑ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –¢–ï–õ–ï–ú–ï–¢–†–ò–ò –ù–ê –í–°–ï–• –§–ê–ô–õ–ê–•');
console.log('='.repeat(100) + '\n');

// –ö–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const components = {
  'setT("freqValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã',
  'setW("freqBar"': 'Progress bar —á–∞—Å—Ç–æ—Ç—ã',
  'setT("qualityValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞',
  'setW("qualityBar"': 'Progress bar –∫–∞—á–µ—Å—Ç–≤–∞',
  'setT("freezeStatusValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–±—É—á–µ–Ω–∏—è',
  'setT("precisionValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏',
  'setT("HValue"': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ H',
  'setW("lrBar"': 'Progress bar LR',
  'setW("l2Bar"': 'Progress bar L2',
  'setW("mixBar"': 'Progress bar Mix',
  'lrAuto && lrAuto.checked': 'AUTO —Ä–µ–∂–∏–º LR',
  'l2Auto && l2Auto.checked': 'AUTO —Ä–µ–∂–∏–º L2',
  'mixAuto && mixAuto.checked': 'AUTO —Ä–µ–∂–∏–º Mix',
};

const results = {};

files.forEach((filePath) => {
  const filename = path.basename(filePath);
  console.log(`üìÑ ${filename}`);
  console.log('-'.repeat(100));
  
  if (!fs.existsSync(filePath)) {
    console.log(`  ‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù\n`);
    results[filename] = 0;
    return;
  }
  
  const content = fs.readFileSync(filePath, 'utf8');
  let foundCount = 0;
  
  Object.entries(components).forEach(([pattern, description]) => {
    if (content.includes(pattern)) {
      console.log(`  ‚úÖ ${description.padEnd(40)}`);
      foundCount++;
    } else {
      console.log(`  ‚ö†Ô∏è ${description.padEnd(40)} (–Ω–µ –Ω–∞–π–¥–µ–Ω–æ)`);
    }
  });
  
  results[filename] = foundCount;
  console.log(`\n  –†–µ–∑—É–ª—å—Ç–∞—Ç: ${foundCount}/${Object.keys(components).length}`);
  console.log('');
});

// –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
console.log('='.repeat(100));
console.log('üìä –ò–¢–û–ì–û–í–ê–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø:\n');

const allSame = Object.values(results).every((v, i, arr) => v === arr[0]);

if (allSame) {
  console.log('‚úÖ –í–°–ï 4 –§–ê–ô–õ–ê –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–´ –ò –°–û–î–ï–†–ñ–ê–¢ –ü–û–õ–ù–£–Æ –†–ï–ê–õ–ò–ó–ê–¶–ò–Æ –¢–ï–õ–ï–ú–ï–¢–†–ò–ò');
  console.log(`   –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª: ${Object.values(results)[0]}/${Object.keys(components).length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤\n`);
} else {
  console.log('‚ö†Ô∏è –†–ê–ó–õ–ò–ß–ò–Ø –í –§–ê–ô–õ–ê–•:');
  Object.entries(results).forEach(([filename, count]) => {
    const bar = '‚ñà'.repeat(count) + '‚ñë'.repeat(Object.keys(components).length - count);
    console.log(`   ${filename.padEnd(30)} ${bar} ${count}/${Object.keys(components).length}`);
  });
  console.log('');
}

console.log('='.repeat(100) + '\n');

// –ï—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö
if (Object.values(results).every(v => v === Object.keys(components).length)) {
  console.log('üéâ –°–ò–°–¢–ï–ú–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø –ò –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–ê:');
  console.log('');
  console.log('   ‚úÖ –í—Å–µ 28 HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω—ã');
  console.log('   ‚úÖ –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ render()');
  console.log('   ‚úÖ –í—Å–µ 3 progress bars –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç');
  console.log('   ‚úÖ AUTO —Ä–µ–∂–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω');
  console.log('   ‚úÖ –í—Å–µ 4 —Ñ–∞–π–ª–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
  console.log('   ‚úÖ –†–µ–∞–ª—å–Ω–∞—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è –≤–º–µ—Å—Ç–æ –ø—Å–µ–≤–¥–æ');
  console.log('   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 160ms (–∫–∞–∂–¥—ã–π —Ü–∏–∫–ª –∞–ª–≥–æ—Ä–∏—Ç–º–∞)');
  console.log('');
  console.log('   üöÄ –ì–û–¢–û–í–û –ö PRODUCTION!\n');
} else {
  console.log('‚ö†Ô∏è –ï—Å—Ç—å —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ñ–∞–π–ª–∞–º–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n');
}

console.log('='.repeat(100) + '\n');
