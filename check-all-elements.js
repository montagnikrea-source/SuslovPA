#!/usr/bin/env node

/**
 * –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –≠–õ–ï–ú–ï–ù–¢–û–í –¢–ï–õ–ï–ú–ï–¢–†–ò–ò
 * –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∏ –≤–∏–¥–∏–º—ã
 */

const fs = require('fs');

const htmlFile = '/workspaces/SuslovPA/noninput.html';
const html = fs.readFileSync(htmlFile, 'utf8');

console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–°–ï–• –≠–õ–ï–ú–ï–ù–¢–û–í                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

// –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è
const elements = {
  'üìä –û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò': [
    'freqValue', 'freqBar', 'inertiaValue', 'inertiaBar', 'confValue', 'confBar'
  ],
  '‚öôÔ∏è –ü–ê–†–ê–ú–ï–¢–†–´ –û–ë–£–ß–ï–ù–ò–Ø': [
    'lrSlider', 'lrVal', 'lrBar', 
    'l2Slider', 'l2Val', 'l2Bar',
    'mixSlider', 'mixVal', 'mixBar'
  ],
  'üß† –ê–î–ê–ü–¢–ò–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò': [
    'resourceValue', 'resourceBar', 'lrAdaptValue', 'mixAdaptValue', 'KpAdaptValue'
  ],
  'üèóÔ∏è –ê–†–•–ò–¢–ï–ö–¢–£–†–ê': [
    'HValue', 'qualityValue', 'qualityBar', 'freezeStatusValue', 'precisionValue'
  ],
  'üì° –°–¢–ê–¢–£–°': [
    'statusText', 'loadingBar', 'info'
  ]
};

console.log(`1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø HTML –≠–õ–ï–ú–ï–ù–¢–û–í:\n`);

let totalElements = 0;
let foundElements = 0;
let htmlIssues = [];

Object.entries(elements).forEach(([category, ids]) => {
  console.log(`${category}:`);
  
  ids.forEach(id => {
    totalElements++;
    const exists = html.includes(`id="${id}"`);
    
    if (exists) {
      foundElements++;
      console.log(`   ‚úÖ ${id}`);
    } else {
      console.log(`   ‚ùå ${id} - –ù–ï –ù–ê–ô–î–ï–ù!`);
      htmlIssues.push(id);
    }
  });
  console.log('');
});

console.log(`\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–ô –í render():\n`);

// –ù–∞–π–¥–µ–º render —Ñ—É–Ω–∫—Ü–∏—é
const renderStart = html.indexOf('function render(out)');
const emulateLoadStart = html.indexOf('function emulateLoad', renderStart);
const renderBody = html.substring(renderStart, emulateLoadStart);

let updateCount = 0;
let updateIssues = [];

Object.entries(elements).forEach(([category, ids]) => {
  console.log(`${category}:`);
  
  ids.forEach(id => {
    // –ò—â–µ–º setT –∏–ª–∏ setW —Å —ç—Ç–∏–º id
    const setTPattern = new RegExp(`setT\\s*\\(\\s*['"]*${id}['"]*\\s*,`);
    const setWPattern = new RegExp(`setW\\s*\\(\\s*['"]*${id}['"]*\\s*,`);
    const elementPattern = new RegExp(`${id}\\s*\\.`);
    
    if (setTPattern.test(renderBody) || setWPattern.test(renderBody)) {
      updateCount++;
      console.log(`   ‚úÖ ${id} - –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
    } else if (elementPattern.test(renderBody)) {
      console.log(`   ‚ö†Ô∏è ${id} - –ø—Ä—è–º–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–µ —á–µ—Ä–µ–∑ setT/setW)`);
      updateCount++;
    } else {
      console.log(`   ‚ùå ${id} - –ù–ï –û–ë–ù–û–í–õ–Ø–ï–¢–°–Ø`);
      updateIssues.push(id);
    }
  });
  console.log('');
});

console.log(`\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê CSS –í–ò–î–ò–ú–û–°–¢–ò:\n`);

let cssIssues = [];

// –ò—â–µ–º display: none –∏ opacity: 0 –¥–ª—è –Ω–∞—à–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
Object.values(elements).flat().forEach(id => {
  // –ò—â–µ–º CSS –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
  const idPattern = new RegExp(`#${id}\\s*{[^}]*}`);
  const match = idPattern.exec(html);
  
  if (match) {
    const css = match[0];
    if (css.includes('display: none') || css.includes('display:none')) {
      console.log(`   ‚ö†Ô∏è ${id} - —Å–∫—Ä—ã—Ç display:none!`);
      cssIssues.push(`${id}: display:none`);
    } else if (css.includes('opacity: 0') || css.includes('opacity:0')) {
      console.log(`   ‚ö†Ô∏è ${id} - —Å–∫—Ä—ã—Ç opacity:0!`);
      cssIssues.push(`${id}: opacity:0`);
    } else {
      console.log(`   ‚úÖ ${id} - –≤–∏–¥–∏–º`);
    }
  } else {
    console.log(`   ‚ÑπÔ∏è ${id} - –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ CSS (–Ω–∞—Å–ª–µ–¥—É–µ—Ç —Å—Ç–∏–ª–∏)`);
  }
});

// –ò—Ç–æ–≥–∏
console.log(`\n${'‚ïê'.repeat(100)}`);
console.log(`üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:\n`);

console.log(`   HTML —ç–ª–µ–º–µ–Ω—Ç—ã:      ${foundElements}/${totalElements}`);
console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è:         ${updateCount}/${totalElements}`);
console.log(`   \n`);

if (htmlIssues.length > 0) {
  console.log(`   ‚ö†Ô∏è –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï HTML –≠–õ–ï–ú–ï–ù–¢–´:`);
  htmlIssues.forEach(id => console.log(`      ‚Ä¢ ${id}`));
}

if (updateIssues.length > 0) {
  console.log(`   ‚ö†Ô∏è –ù–ï –û–ë–ù–û–í–õ–Ø–Æ–©–ò–ï–°–Ø –≠–õ–ï–ú–ï–ù–¢–´:`);
  updateIssues.forEach(id => console.log(`      ‚Ä¢ ${id}`));
}

if (cssIssues.length > 0) {
  console.log(`   ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–´ –° CSS –í–ò–î–ò–ú–û–°–¢–¨–Æ:`);
  cssIssues.forEach(issue => console.log(`      ‚Ä¢ ${issue}`));
}

if (htmlIssues.length === 0 && updateIssues.length === 0 && cssIssues.length === 0) {
  console.log(`   ‚úÖ –í–°–ï –≠–õ–ï–ú–ï–ù–¢–´ –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢, –û–ë–ù–û–í–õ–Ø–Æ–¢–°–Ø –ò –í–ò–î–ò–ú–´!`);
  console.log(`   \n   üéâ –ï–°–õ–ò –¢–ï–õ–ï–ú–ï–¢–†–ò–Ø –ù–ï –í–ò–î–ù–ê, –ü–†–ò–ß–ò–ù–´:`);
  console.log(`      1. –ò–¥–µ—Ç —Ñ–∞–∑–∞ "–ü–ª–∞–≤–Ω–æ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ..."  (–∂–¥–∏—Ç–µ 3-5 —Å–µ–∫)`);
  console.log(`      2. –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º`);
  console.log(`      3. –≠–ª–µ–º–µ–Ω—Ç—ã –ª–µ–∂–∞—Ç –∑–∞ –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (z-index)`);
  console.log(`      4. –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–∫—Ä—ã—Ç`);
} else {
  console.log(`\n   ‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ - –ù–£–ñ–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!`);
}

console.log(`\n${'‚ïê'.repeat(100)}\n`);
