#!/usr/bin/env node

/**
 * TELEMETRY REAL-TIME VERIFICATION SCRIPT
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

const fs = require('fs');
const path = require('path');

// –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const TELEMETRY_ELEMENTS = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  'freqValue': { name: '–ß–∞—Å—Ç–æ—Ç–∞ (–ì—Ü)', type: 'number', range: [0, 100] },
  'inertiaValue': { name: '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å %', type: 'percentage', range: [0, 100] },
  'confValue': { name: '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å %', type: 'percentage', range: [0, 100] },
  
  // Progress bars –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  'freqBar': { name: 'Progress bar –ß–∞—Å—Ç–æ—Ç–∞', type: 'progress', range: [0, 100] },
  'inertiaBar': { name: 'Progress bar –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å', type: 'progress', range: [0, 100] },
  'confBar': { name: 'Progress bar –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å', type: 'progress', range: [0, 100] },
  
  // –ü–æ–ª–∑—É–Ω–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è
  'lrSlider': { name: 'Learning Rate –ø–æ–ª–∑—É–Ω–æ–∫', type: 'slider', range: [0.001, 0.2] },
  'l2Slider': { name: 'L2 –†–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª–∑—É–Ω–æ–∫', type: 'slider', range: [0, 0.01] },
  'mixSlider': { name: 'Mix –ø–æ–ª–∑—É–Ω–æ–∫', type: 'slider', range: [0, 1] },
  
  // Progress bars –ø–æ–ª–∑—É–Ω–∫–æ–≤
  'lrBar': { name: 'Progress bar Learning Rate', type: 'progress', range: [0, 100] },
  'l2Bar': { name: 'Progress bar L2', type: 'progress', range: [0, 100] },
  'mixBar': { name: 'Progress bar Mix', type: 'progress', range: [0, 100] },
  
  // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
  'lrVal': { name: 'Learning Rate –∑–Ω–∞—á–µ–Ω–∏–µ', type: 'text', pattern: /\d+\.\d+/ },
  'l2Val': { name: 'L2 –∑–Ω–∞—á–µ–Ω–∏–µ', type: 'text', pattern: /\d+\.\d+/ },
  'mixVal': { name: 'Mix –∑–Ω–∞—á–µ–Ω–∏–µ', type: 'text', pattern: /\d+\.\d+/ },
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  'resourceValue': { name: '–†–µ—Å—É—Ä—Å—ã %', type: 'text', pattern: /\d+%/ },
  'lrAdaptValue': { name: 'Learning Rate –∞–¥–∞–ø—Ç.', type: 'text', pattern: /\d+\.\d+/ },
  'mixAdaptValue': { name: 'Mix –∞–¥–∞–ø—Ç. %', type: 'text', pattern: /\d+%/ },
  'KpAdaptValue': { name: 'Kp –∞–¥–∞–ø—Ç.', type: 'text', pattern: /\d+\.\d+/ },
  
  // –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
  'HValue': { name: 'H (–Ω–µ–π—Ä–æ–Ω—ã)', type: 'text', pattern: /\d+/ },
  'qualityValue': { name: '–ö–∞—á–µ—Å—Ç–≤–æ %', type: 'text', pattern: /\d+%|\\?/ },
  'freezeStatusValue': { name: '–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è', type: 'text', pattern: /Learning|Frozen/ },
  'precisionValue': { name: '–¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏–π', type: 'text', pattern: /float32|float64/ },
  
  // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä—ã –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
  'resourceBar': { name: 'Progress bar –†–µ—Å—É—Ä—Å—ã', type: 'progress', range: [0, 100] },
  'qualityBar': { name: 'Progress bar –ö–∞—á–µ—Å—Ç–≤–æ', type: 'progress', range: [0, 100] },
  
  // Status –∏ info
  'statusText': { name: '–°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç', type: 'text', pattern: /.+/ },
  'loadingBar': { name: 'Progress bar –∑–∞–≥—Ä—É–∑–∫–∏', type: 'progress', range: [0, 100] },
  'info': { name: 'Info —Å—Ç—Ä–æ–∫–∞', type: 'text', pattern: /–°–æ—Å—Ç–æ—è–Ω–∏–µ:|f=/ },
};

const htmlFile = path.join(__dirname, 'noninput.html');

console.log('\nüîç –ü–†–û–í–ï–†–ö–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò\n');
console.log('=' .repeat(80));

// –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª
const htmlContent = fs.readFileSync(htmlFile, 'utf8');

// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ HTML
console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –≠–õ–ï–ú–ï–ù–¢–û–í –í HTML:\n');

let elementsPresent = 0;
let elementsMissing = 0;

Object.entries(TELEMETRY_ELEMENTS).forEach(([id, config]) => {
  const idPattern = new RegExp(`id=["']${id}["']`);
  if (idPattern.test(htmlContent)) {
    console.log(`‚úÖ ${id.padEnd(25)} - ${config.name}`);
    elementsPresent++;
  } else {
    console.log(`‚ùå ${id.padEnd(25)} - ${config.name} (–ù–ï –ù–ê–ô–î–ï–ù!)`);
    elementsMissing++;
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${elementsPresent} –Ω–∞–π–¥–µ–Ω–æ, ${elementsMissing} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);

// 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é render()
console.log('\n' + '='.repeat(80));
console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ò render():\n');

const renderMatch = htmlContent.match(/function render\(out\)\s*\{[\s\S]*?\n\s*\}/);
if (renderMatch) {
  const renderCode = renderMatch[0];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
  const updateChecks = [
    { pattern: /setT\("freqValue"/, name: 'setT("freqValue", ...) - –ß–∞—Å—Ç–æ—Ç–∞' },
    { pattern: /setW\("freqBar"/, name: 'setW("freqBar", ...) - Progress bar –ß–∞—Å—Ç–æ—Ç–∞' },
    { pattern: /setT\("inertiaValue"/, name: 'setT("inertiaValue", ...) - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å' },
    { pattern: /setW\("inertiaBar"/, name: 'setW("inertiaBar", ...) - Progress bar –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å' },
    { pattern: /setT\("confValue"/, name: 'setT("confValue", ...) - –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å' },
    { pattern: /setW\("confBar"/, name: 'setW("confBar", ...) - Progress bar –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å' },
    { pattern: /setT\("resourceValue"/, name: 'setT("resourceValue", ...) - –†–µ—Å—É—Ä—Å—ã' },
    { pattern: /setW\("resourceBar"/, name: 'setW("resourceBar", ...) - Progress bar –†–µ—Å—É—Ä—Å—ã' },
    { pattern: /setT\("lrAdaptValue"/, name: 'setT("lrAdaptValue", ...) - LR –∞–¥–∞–ø—Ç.' },
    { pattern: /setT\("mixAdaptValue"/, name: 'setT("mixAdaptValue", ...) - Mix –∞–¥–∞–ø—Ç.' },
    { pattern: /setT\("KpAdaptValue"/, name: 'setT("KpAdaptValue", ...) - Kp –∞–¥–∞–ø—Ç.' },
    { pattern: /setW\("lrBar"/, name: 'setW("lrBar", ...) - Progress bar LR' },
    { pattern: /setW\("l2Bar"/, name: 'setW("l2Bar", ...) - Progress bar L2' },
    { pattern: /setW\("mixBar"/, name: 'setW("mixBar", ...) - Progress bar Mix' },
    { pattern: /setT\("qualityValue"/, name: 'setT("qualityValue", ...) - –ö–∞—á–µ—Å—Ç–≤–æ' },
    { pattern: /setW\("qualityBar"/, name: 'setW("qualityBar", ...) - Progress bar –ö–∞—á–µ—Å—Ç–≤–æ' },
    { pattern: /setT\("freezeStatusValue"/, name: 'setT("freezeStatusValue", ...) - –°—Ç–∞—Ç—É—Å' },
    { pattern: /setT\("HValue"/, name: 'setT("HValue", ...) - H –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞' },
  ];
  
  let renderUpdates = 0;
  updateChecks.forEach(check => {
    if (check.pattern.test(renderCode)) {
      console.log(`‚úÖ ${check.name}`);
      renderUpdates++;
    } else {
      console.log(`‚ùå ${check.name} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ render()!)`);
    }
  });
  
  console.log(`\nüìä –í render() –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è: ${renderUpdates}/${updateChecks.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
} else {
  console.log('‚ùå –§—É–Ω–∫—Ü–∏—è render() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
}

// 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loop()
console.log('\n' + '='.repeat(80));
console.log('\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–£–ù–ö–¶–ò–ò loop():\n');

const loopMatch = htmlContent.match(/function loop\(\)\s*\{[\s\S]*?\n\s*\}/);
if (loopMatch) {
  const loopCode = loopMatch[0];
  
  const loopChecks = [
    { pattern: /lrSlider\.value\s*=/, name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ lrSlider.value' },
    { pattern: /l2Slider\.value\s*=/, name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ l2Slider.value' },
    { pattern: /mixSlider\.value\s*=/, name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ mixSlider.value' },
    { pattern: /render\(/, name: '–í—ã–∑–æ–≤ render() —Ñ—É–Ω–∫—Ü–∏–∏' },
    { pattern: /scan\.processOnce\(\)/, name: '–í—ã–∑–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ processOnce()' },
    { pattern: /setTimeout\(loop/, name: '–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ setTimeout(loop, ...)' },
  ];
  
  let loopUpdates = 0;
  loopChecks.forEach(check => {
    if (check.pattern.test(loopCode)) {
      console.log(`‚úÖ ${check.name}`);
      loopUpdates++;
    } else {
      console.log(`‚ùå ${check.name}`);
    }
  });
  
  console.log(`\nüìä –í loop() —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ: ${loopUpdates}/${loopChecks.length} –ø—Ä–æ–≤–µ—Ä–æ–∫`);
} else {
  console.log('‚ùå –§—É–Ω–∫—Ü–∏—è loop() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
}

// 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–æ–≤
console.log('\n' + '='.repeat(80));
console.log('\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–õ–£–®–ê–¢–ï–õ–ï–ô –°–õ–ê–ô–î–ï–†–û–í:\n');

const sliderListenerChecks = [
  { pattern: /lrSlider\s*\(\s*'input'|lrSlider\s*\.addEventListener\s*\(\s*['"]input/, name: '–°–ª—É—à–∞—Ç–µ–ª—å input –¥–ª—è lrSlider' },
  { pattern: /l2Slider\s*\(\s*'input'|l2Slider\s*\.addEventListener\s*\(\s*['"]input/, name: '–°–ª—É—à–∞—Ç–µ–ª—å input –¥–ª—è l2Slider' },
  { pattern: /mixSlider\s*\(\s*'input'|mixSlider\s*\.addEventListener\s*\(\s*['"]input/, name: '–°–ª—É—à–∞—Ç–µ–ª—å input –¥–ª—è mixSlider' },
];

let sliderListeners = 0;
sliderListenerChecks.forEach(check => {
  if (check.pattern.test(htmlContent)) {
    console.log(`‚úÖ ${check.name}`);
    sliderListeners++;
  } else {
    console.log(`‚ö†Ô∏è ${check.name} (–º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)`);
  }
});

// 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–π setT –∏ setW
console.log('\n' + '='.repeat(80));
console.log('\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô:\n');

const helperChecks = [
  { pattern: /const setT\s*=|function setT/, name: '–§—É–Ω–∫—Ü–∏—è setT (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞)' },
  { pattern: /const setW\s*=|function setW/, name: '–§—É–Ω–∫—Ü–∏—è setW (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ width)' },
  { pattern: /const \$ = \(id\)|function \$\(id\)/, name: '–§—É–Ω–∫—Ü–∏—è $ (–ø–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞)' },
];

let helperFunctions = 0;
helperChecks.forEach(check => {
  if (check.pattern.test(htmlContent)) {
    console.log(`‚úÖ ${check.name}`);
    helperFunctions++;
  } else {
    console.log(`‚ùå ${check.name}`);
  }
});

console.log(`\nüìä –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: ${helperFunctions}/${helperChecks.length}`);

// 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
console.log('\n' + '='.repeat(80));
console.log('\nüìã –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:\n');

const totalChecks = elementsPresent + renderUpdates + loopUpdates + sliderListeners + helperFunctions;
const totalPossible = 
  Object.keys(TELEMETRY_ELEMENTS).length + 
  19 + // updateChecks
  6 +  // loopChecks
  3 +  // sliderListenerChecks
  3;   // helperChecks

const completeness = ((totalChecks / totalPossible) * 100).toFixed(1);

console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ HTML:         ${elementsPresent}/${Object.keys(TELEMETRY_ELEMENTS).length}`);
console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ render(): ${renderUpdates}/19`);
console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫ –≤ loop():     ${loopUpdates}/6`);
console.log(`‚úÖ –°–ª—É—à–∞—Ç–µ–ª–µ–π —Å–ª–∞–π–¥–µ—Ä–æ–≤: ${sliderListeners}/3`);
console.log(`‚úÖ –§—É–Ω–∫—Ü–∏–π –ø–æ–º–æ—â–Ω–∏–∫–æ–≤:    ${helperFunctions}/3`);
console.log(`\nüéØ –ü–û–õ–ù–û–¢–ê –†–ï–ê–õ–ò–ó–ê–¶–ò–ò:    ${completeness}%`);

if (completeness >= 90) {
  console.log('\n‚úÖ –°–ò–°–¢–ï–ú–ê –¢–ï–õ–ï–ú–ï–¢–†–ò–ò –ü–û–õ–ù–û–°–¢–¨–Æ –†–ê–ë–û–ß–ê–Ø!');
} else if (completeness >= 70) {
  console.log('\n‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ß–ê–°–¢–ò–ß–ù–û –†–ê–ë–û–ß–ê–Ø, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–µ–ª—ã.');
} else {
  console.log('\n‚ùå –°–ò–°–¢–ï–ú–ê –ù–ï –ü–û–õ–ù–û–°–¢–¨–Æ –†–ï–ê–õ–ò–ó–û–í–ê–ù–ê.');
}

console.log('\n' + '='.repeat(80) + '\n');
