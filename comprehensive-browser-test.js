#!/usr/bin/env node
/**
 * –ü–û–õ–ù–´–ô –¢–ï–°–¢ –†–ê–ë–û–¢–´ –°–ê–ô–¢–ê
 * –≠–º—É–ª–∏—Ä—É–µ—Ç –±—Ä–∞—É–∑–µ—Ä, –∑–∞–≥—Ä—É–∂–∞–µ—Ç HTML, –≤—ã–ø–æ–ª–Ω—è–µ—Ç JS –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã
 */

const fs = require('fs');
const path = require('path');

// ===== –ê–ù–ê–õ–ò–ó #1: –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 1: HTML –°–¢–†–£–ö–¢–£–†–ê');
console.log('='.repeat(80));

const htmlFile = '/workspaces/SuslovPA/noninput.html';
const html = fs.readFileSync(htmlFile, 'utf8');

// –ò—â–µ–º –≤—Å–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è —ç–ª–µ–º–µ–Ω—Ç—ã
const telemetryElements = [
  'freqValue', 'freqBar',
  'confValue', 'confBar',
  'inertiaValue', 'inertiaBar',
  'lrSlider', 'lrVal', 'lrBar',
  'l2Slider', 'l2Val', 'l2Bar',
  'mixSlider', 'mixVal', 'mixBar',
  'resourceValue', 'resourceBar',
  'lrAdaptValue',
  'mixAdaptValue',
  'KpAdaptValue',
  'HValue',
  'qualityValue', 'qualityBar',
  'freezeStatusValue',
  'precisionValue',
  'statusText',
  'loadingBar',
  'info'
];

console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ HTML:');
let missingElements = [];
telemetryElements.forEach(id => {
  const regex = new RegExp(`id=["']${id}["']`, 'i');
  if (html.includes(`id="${id}"`) || html.includes(`id='${id}'`)) {
    console.log(`  ‚úÖ #${id}`);
  } else {
    console.log(`  ‚ùå #${id} - –ù–ï –ù–ê–ô–î–ï–ù!`);
    missingElements.push(id);
  }
});

console.log(`\n‚ú® –ù–∞–π–¥–µ–Ω–æ: ${telemetryElements.length - missingElements.length}/${telemetryElements.length}`);
if (missingElements.length > 0) {
  console.log(`‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingElements.join(', ')}`);
}

// ===== –ê–ù–ê–õ–ò–ó #2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π JS =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 2: JAVASCRIPT –§–£–ù–ö–¶–ò–ò');
console.log('='.repeat(80));

const functions = [
  'setT',
  'setW',
  'render',
  'loop',
  'attachSecureShell',
  'startPseudoTelemetry',
  'attachTelemetryHandler'
];

console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π:');
functions.forEach(fn => {
  if (html.includes(`function ${fn}`) || html.includes(`${fn} = function`) || html.includes(`${fn}()`) && html.includes(`function ${fn}`)) {
    if (fn === 'startPseudoTelemetry') {
      console.log(`  ‚ö†Ô∏è  ${fn} - –í–°–ï –ï–©–ï –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ!)`);
    } else {
      console.log(`  ‚úÖ ${fn} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞`);
    }
  } else if (fn === 'startPseudoTelemetry') {
    console.log(`  ‚úÖ ${fn} —É–¥–∞–ª–µ–Ω–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ!)`);
  } else {
    console.log(`  ‚ùå ${fn} - –ù–ï –ù–ê–ô–î–ï–ù–ê!`);
  }
});

// ===== –ê–ù–ê–õ–ò–ó #3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ render() =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 3: –û–ë–ù–û–í–õ–ï–ù–ò–ï –≠–õ–ï–ú–ï–ù–¢–û–í –í render()');
console.log('='.repeat(80));

// –ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é render
const renderMatch = html.match(/function render\s*\(\s*out\s*\)\s*{([\s\S]*?)^[\s]*}\s*$/m);
if (renderMatch) {
  const renderBody = renderMatch[1];
  console.log('\nüìä –≠–ª–µ–º–µ–Ω—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º—ã–µ –≤ render():');
  
  let updateCount = 0;
  telemetryElements.forEach(id => {
    const updateRegex = new RegExp(`(setT|setW)\\s*\\(\\s*["']${id}["']`, 'i');
    if (updateRegex.test(renderBody)) {
      console.log(`  ‚úÖ #${id} –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
      updateCount++;
    } else {
      console.log(`  ‚ùå #${id} –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
    }
  });
  console.log(`\n‚ú® –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è: ${updateCount}/${telemetryElements.length}`);
} else {
  console.log('‚ùå –§—É–Ω–∫—Ü–∏—è render() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
}

// ===== –ê–ù–ê–õ–ò–ó #4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 4: –¶–ò–ö–õ –û–ë–ù–û–í–õ–ï–ù–ò–Ø');
console.log('='.repeat(80));

console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:');

if (html.includes('function loop()')) {
  console.log('  ‚úÖ loop() —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞');
} else {
  console.log('  ‚ùå loop() —Ñ—É–Ω–∫—Ü–∏—è –ù–ï –Ω–∞–π–¥–µ–Ω–∞');
}

if (html.includes('setTimeout(loop')) {
  console.log('  ‚úÖ setTimeout(loop, ...) –Ω–∞–π–¥–µ–Ω');
  const timeoutMatch = html.match(/setTimeout\s*\(\s*loop\s*,\s*(\d+)/);
  if (timeoutMatch) {
    console.log(`  ‚ÑπÔ∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${timeoutMatch[1]}ms (${(1000/timeoutMatch[1]).toFixed(2)} —Ä–∞–∑/—Å–µ–∫)`);
  }
} else {
  console.log('  ‚ùå setTimeout(loop) –ù–ï –Ω–∞–π–¥–µ–Ω');
}

if (html.includes('window.__legacyEngine') && html.includes('window.__legacyEngine.start()')) {
  console.log('  ‚úÖ window.__legacyEngine.start() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è');
} else if (html.includes('window.__legacyEngine')) {
  console.log('  ‚ö†Ô∏è  window.__legacyEngine —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ start() –º–æ–∂–µ—Ç –Ω–µ –≤—ã–∑–≤–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
} else {
  console.log('  ‚ùå window.__legacyEngine –ù–ï –Ω–∞–π–¥–µ–Ω');
}

// ===== –ê–ù–ê–õ–ò–ó #5: –ü–æ–∏—Å–∫ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–±–ª–µ–º =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 5: –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–ë–õ–ï–ú–´');
console.log('='.repeat(80));

const issues = [];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ requestAnimationFrame
if (html.includes('requestAnimationFrame') && !html.includes('startPseudoTelemetry')) {
  issues.push('‚ö†Ô∏è  requestAnimationFrame –Ω–∞–π–¥–µ–Ω (–º–æ–∂–µ—Ç –∫–æ–Ω–∫—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Å setTimeout)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
if (html.includes('try {') && html.includes('catch')) {
  console.log('  ‚úÖ Try-catch –±–ª–æ–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç');
} else {
  issues.push('‚ö†Ô∏è  Try-catch –±–ª–æ–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–∫—Ä—ã—Ç—ã)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ console.error
if (html.includes('console.error')) {
  console.log('  ‚úÖ console.error –≤—ã–∑–æ–≤—ã –Ω–∞–π–¥–µ–Ω—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)');
} else {
  issues.push('‚ö†Ô∏è  console.error –Ω–µ –Ω–∞–π–¥–µ–Ω (—Å–ª–æ–∂–Ω–µ–µ –æ—Ç–ª–∞–∂–∏–≤–∞—Ç—å)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (html.includes('DOMContentLoaded')) {
  console.log('  ‚úÖ DOMContentLoaded –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–¥–µ–Ω');
} else {
  issues.push('‚ùå DOMContentLoaded –ù–ï –Ω–∞–π–¥–µ–Ω (—Å–∫—Ä–∏–ø—Ç—ã –º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM)');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (html.includes('window.__telemetryDebug')) {
  console.log('  ‚úÖ window.__telemetryDebug –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞–π–¥–µ–Ω');
} else {
  issues.push('‚ö†Ô∏è  window.__telemetryDebug –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞)');
}

if (issues.length > 0) {
  console.log('\nüö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:');
  issues.forEach(issue => console.log('  ' + issue));
} else {
  console.log('\n‚ú® –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
}

// ===== –ê–ù–ê–õ–ò–ó #6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö 4 —Ñ–∞–π–ª–æ–≤ =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 6: –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø 4 –§–ê–ô–õ–û–í');
console.log('='.repeat(80));

const files = [
  '/workspaces/SuslovPA/noninput.html',
  '/workspaces/SuslovPA/noninput-mobile.html',
  '/workspaces/SuslovPA/public/noninput.html',
  '/workspaces/SuslovPA/public/noninput-mobile.html'
];

console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤:');
files.forEach(file => {
  if (fs.existsSync(file)) {
    const content = fs.readFileSync(file, 'utf8');
    const hasPseudo = content.includes('function startPseudoTelemetry');
    const hasLegacy = content.includes('window.__legacyEngine.start()');
    const updateCount = telemetryElements.filter(id => 
      content.includes(`setT("${id}"`) || 
      content.includes(`setW("${id}"`) ||
      content.includes(`setT('${id}'`) ||
      content.includes(`setW('${id}'`)
    ).length;
    
    console.log(`\n  üìÑ ${path.basename(file)}`);
    console.log(`    –†–∞–∑–º–µ—Ä: ${(content.length / 1024).toFixed(1)} KB`);
    console.log(`    –ü—Å–µ–≤–¥–æ-—Ä–µ–∂–∏–º: ${hasPseudo ? '‚ùå –ï–°–¢–¨' : '‚úÖ —É–¥–∞–ª–µ–Ω'}`);
    console.log(`    –†–µ–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: ${hasLegacy ? '‚úÖ –µ—Å—Ç—å' : '‚ùå –ù–ï–¢'}`);
    console.log(`    –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${updateCount}/${telemetryElements.length}`);
  } else {
    console.log(`\n  ‚ùå ${file} - –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`);
  }
});

// ===== –ê–ù–ê–õ–ò–ó #7: –ê–Ω–∞–ª–∏–∑ render() –ø–æ–¥—Ä–æ–±–Ω–æ =====
console.log('\n' + '='.repeat(80));
console.log('üîç –ê–ù–ê–õ–ò–ó 7: –ü–û–î–†–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó render()');
console.log('='.repeat(80));

const renderRegex = /function render\s*\(\s*out\s*\)\s*{([\s\S]*?)^[\s]{0,8}}\s*$/m;
const renderMatch2 = html.match(renderRegex);

if (renderMatch2) {
  const renderBody = renderMatch2[1];
  
  // –ü–æ—Å—á–∏—Ç–∞—Ç—å setT –≤—ã–∑–æ–≤—ã
  const setTMatches = renderBody.match(/setT\s*\(/g) || [];
  const setWMatches = renderBody.match(/setW\s*\(/g) || [];
  
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ render():');
  console.log(`  setT –≤—ã–∑–æ–≤–æ–≤: ${setTMatches.length}`);
  console.log(`  setW –≤—ã–∑–æ–≤–æ–≤: ${setWMatches.length}`);
  console.log(`  –í—Å–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${setTMatches.length + setWMatches.length}`);
  
  // –ù–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:');
  const params = ['freqValue', 'confValue', 'inertiaValue', 'resourceValue', 'HValue', 'qualityValue'];
  params.forEach(param => {
    const regex = new RegExp(`setT\\s*\\(\\s*["']${param}["']`);
    const matches = renderBody.match(regex) ? renderBody.match(regex).length : 0;
    if (regex.test(renderBody)) {
      console.log(`  ‚úÖ ${param} –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
    } else {
      console.log(`  ‚ùå ${param} –ù–ï –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ out –ø–∞—Ä–∞–º–µ—Ç—Ä—É
  const hasOutAccess = renderBody.includes('out.');
  console.log(`\nüì• –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ out: ${hasOutAccess ? '‚úÖ' : '‚ùå'}`);
  if (hasOutAccess) {
    const outMatches = renderBody.match(/out\.[a-zA-Z_$][a-zA-Z0-9_$]*/g) || [];
    const uniqueProps = new Set(outMatches);
    console.log(`  –°–≤–æ–π—Å—Ç–≤–∞ –∏–∑ out: ${Array.from(uniqueProps).join(', ')}`);
  }
} else {
  console.log('‚ùå –§—É–Ω–∫—Ü–∏—è render() –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ñ–∞–π–ª–µ!');
}

// ===== –§–ò–ù–ê–õ–¨–ù–´–ô –í–´–í–û–î =====
console.log('\n' + '='.repeat(80));
console.log('üìã –§–ò–ù–ê–õ–¨–ù–´–ô –î–ò–ê–ì–ù–û–ó');
console.log('='.repeat(80));

const allGood = 
  telemetryElements.length - missingElements.length === telemetryElements.length &&
  !html.includes('function startPseudoTelemetry') &&
  html.includes('window.__legacyEngine.start()');

if (allGood) {
  console.log('\n‚úÖ –í–°–ï –û–ö! –°–∞–π—Ç –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ.');
  console.log('\nüöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –û—Ç–∫—Ä—ã—Ç—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å:');
  console.log('  1. F12 ‚Üí Console');
  console.log('  2. –ò—Å–∫–∞—Ç—å [RENDER N] –ª–æ–≥–∏');
  console.log('  3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
  console.log('  4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –í–°–ï 28 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è (–Ω–µ —á–∞—Å—Ç–∏—á–Ω–æ)');
} else {
  console.log('\n‚ö†Ô∏è  –ù–ê–ô–î–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´:');
  if (missingElements.length > 0) {
    console.log(`  - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç HTML —ç–ª–µ–º–µ–Ω—Ç—ã: ${missingElements.join(', ')}`);
  }
  if (html.includes('function startPseudoTelemetry')) {
    console.log('  - startPseudoTelemetry –≤—Å–µ –µ—â–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
  }
  if (!html.includes('window.__legacyEngine.start()')) {
    console.log('  - window.__legacyEngine.start() –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è!');
  }
}

console.log('\n' + '='.repeat(80) + '\n');
